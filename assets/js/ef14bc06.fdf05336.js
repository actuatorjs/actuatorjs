"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[330],{2470:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>h,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"main/guides/health","title":"HealthChecks","description":"Learn how to create your own HealthChecks.","source":"@site/docs/main/guides/health-checks.md","sourceDirName":"main/guides","slug":"/main/guides/health","permalink":"/actuatorjs/docs/main/guides/health","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"id":"health","title":"HealthChecks","pagination_label":"HealthChecks","description":"Learn how to create your own HealthChecks."},"sidebar":"docs","previous":{"title":"Actuator","permalink":"/actuatorjs/docs/main/guides/actuator"},"next":{"title":"InformationChecks","permalink":"/actuatorjs/docs/main/guides/info"}}');var i=a(4848),c=a(8453);const s={sidebar_position:5,id:"health",title:"HealthChecks",pagination_label:"HealthChecks",description:"Learn how to create your own HealthChecks."},h=void 0,o={},l=[{value:"HealthIndicator interface",id:"healthindicator-interface",level:2},{value:"SimpleHealthCheck",id:"simplehealthcheck",level:2},{value:"AbstractHealthCheck",id:"abstracthealthcheck",level:2}];function r(e){const t={code:"code",h2:"h2",p:"p",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The HealthCheck class allows you to define a healthcheck composed of multiple healthindicators.\r\nThis class only exposes one method, ",(0,i.jsx)(t.code,{children:"check"}),", which allows you to compute and gather all results from all healthindicators."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"check"})," method also returns a list of all the health indicators, and if all are UP, the healthcheck itself is up. If any is DOWN, the healthcheck is DOWN."]}),"\n",(0,i.jsx)(t.h2,{id:"healthindicator-interface",children:"HealthIndicator interface"}),"\n",(0,i.jsxs)(t.p,{children:["The HealthIndicator is a simple interface exposing a ",(0,i.jsx)(t.code,{children:"check"})," and a ",(0,i.jsx)(t.code,{children:"getName"})," methods.\r\nThe name of a HealthIndicator is used as a unique identifier for a HealthCheck.\r\nIf multiple healthinidcators with the same name are instanciated, only one result will be computed."]}),"\n",(0,i.jsx)(t.h2,{id:"simplehealthcheck",children:"SimpleHealthCheck"}),"\n",(0,i.jsx)(t.p,{children:"This is an implementation of the HealthIndicator interface taking a name and a function as a parameter.\r\nThe function is called to compute the healthcheck."}),"\n",(0,i.jsx)(t.h2,{id:"abstracthealthcheck",children:"AbstractHealthCheck"}),"\n",(0,i.jsx)(t.p,{children:"This is an abstract class with a name and an abstract check method."})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>h});var n=a(6540);const i={},c=n.createContext(i);function s(e){const t=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function h(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);